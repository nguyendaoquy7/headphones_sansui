let currentUser = null;
let cart = [];
let products = [
    {
        id: 1,
        name: "Sansui HD-990 Pro",
        category: "HI-FI",
        price: 2990000,
        originalPrice: 3490000,
        image: "üéß",
        rating: 4.8,
        reviews: 124,
        description: "Tai nghe Hi-Fi cao c·∫•p v·ªõi driver 50mm, √¢m thanh chi ti·∫øt v√† bass s√¢u.",
        badge: "B√°n ch·∫°y",
        features: [
            "Driver 50mm ch·∫•t l∆∞·ª£ng cao",
            "Thi·∫øt k·∫ø over-ear tho·∫£i m√°i",
            "D√¢y c√°p c√≥ th·ªÉ th√°o r·ªùi",
            "√Çm thanh v√≤m 7.1"
        ],
        specifications: {
            "Lo·∫°i tai nghe": "Over-ear",
            "K√≠ch th∆∞·ªõc driver": "50mm",
            "T·∫ßn s·ªë ƒë√°p ·ª©ng": "20Hz - 20kHz",
            "ƒê·ªô nh·∫°y": "110dB",
            "Tr·ªü kh√°ng": "32Œ©",
            "Tr·ªçng l∆∞·ª£ng": "300g"
        },
        thumbnails: ["üéß", "üéµ", "üîä"]
    },
    {
        id: 2,
        name: "Sansui Gaming X7",
        category: "GAMING",
        price: 1590000,
        originalPrice: 1890000,
        image: "üéÆ",
        rating: 4.6,
        reviews: 89,
        description: "Tai nghe gaming chuy√™n nghi·ªáp v·ªõi micro c√≥ th·ªÉ th√°o r·ªùi v√† LED RGB.",
        badge: "Gaming",
        features: [
            "Micro ch·ªëng ·ªìn th√°o r·ªùi",
            "H·ªá th·ªëng ƒë√®n LED RGB",
            "K·∫øt n·ªëi USB v√† 3.5mm",
            "√Çm thanh v√≤m 7.1"
        ],
        specifications: {
            "Lo·∫°i tai nghe": "Over-ear",
            "K√≠ch th∆∞·ªõc driver": "40mm",
            "T·∫ßn s·ªë ƒë√°p ·ª©ng": "20Hz - 20kHz",
            "ƒê·ªô nh·∫°y": "105dB",
            "Tr·ªü kh√°ng": "32Œ©",
            "Tr·ªçng l∆∞·ª£ng": "280g"
        },
        thumbnails: ["üéÆ", "üé§", "üí°"]
    },
    {
        id: 3,
        name: "Sansui Wireless Elite",
        category: "WIRELESS",
        price: 3990000,
        originalPrice: 4490000,
        image: "üì±",
        rating: 4.9,
        reviews: 156,
        description: "Tai nghe kh√¥ng d√¢y cao c·∫•p v·ªõi c√¥ng ngh·ªá ANC v√† th·ªùi l∆∞·ª£ng pin 30h.",
        badge: "M·ªõi nh·∫•t",
        features: [
            "C√¥ng ngh·ªá ch·ªëng ·ªìn ch·ªß ƒë·ªông (ANC)",
            "Th·ªùi l∆∞·ª£ng pin l√™n ƒë·∫øn 30 gi·ªù",
            "K·∫øt n·ªëi Bluetooth 5.0",
            "S·∫°c nhanh USB-C"
        ],
        specifications: {
            "Lo·∫°i tai nghe": "Over-ear",
            "K√≠ch th∆∞·ªõc driver": "40mm",
            "T·∫ßn s·ªë ƒë√°p ·ª©ng": "15Hz - 22kHz",
            "ƒê·ªô nh·∫°y": "108dB",
            "Tr·ªü kh√°ng": "32Œ©",
            "Tr·ªçng l∆∞·ª£ng": "250g"
        },
        thumbnails: ["üì±", "üîá", "üîã"]
    },
    {
        id: 4,
        name: "Sansui Studio Monitor",
        category: "STUDIO",
        price: 4990000,
        originalPrice: 5990000,
        image: "üéµ",
        rating: 4.7,
        reviews: 67,
        description: "Tai nghe studio monitor chuy√™n nghi·ªáp cho nh√† s·∫£n xu·∫•t √¢m nh·∫°c.",
        badge: "Pro",
        features: [
            "√Çm thanh trung th·ª±c",
            "Thi·∫øt k·∫ø ƒë√≥ng k√≠n",
            "D√¢y c√°p d√†i 3m",
            "ƒê·ªám tai tho·∫£i m√°i"
        ],
        specifications: {
            "Lo·∫°i tai nghe": "Over-ear",
            "K√≠ch th∆∞·ªõc driver": "50mm",
            "T·∫ßn s·ªë ƒë√°p ·ª©ng": "10Hz - 30kHz",
            "ƒê·ªô nh·∫°y": "112dB",
            "Tr·ªü kh√°ng": "64Œ©",
            "Tr·ªçng l∆∞·ª£ng": "320g"
        },
        thumbnails: ["üéµ", "üéôÔ∏è", "üîå"]
    },
    {
        id: 5,
        name: "Sansui Sport Active",
        category: "SPORT",
        price: 990000,
        originalPrice: 1290000,
        image: "üèÉ",
        rating: 4.4,
        reviews: 203,
        description: "Tai nghe th·ªÉ thao ch·ªëng n∆∞·ªõc IPX7, ph√π h·ª£p cho m·ªçi ho·∫°t ƒë·ªông.",
        badge: "Th·ªÉ thao",
        features: [
            "Ch·ªëng n∆∞·ªõc IPX7",
            "Thi·∫øt k·∫ø in-ear ch·∫Øc ch·∫Øn",
            "Th·ªùi l∆∞·ª£ng pin 12 gi·ªù",
            "M√≥c tai c·ªë ƒë·ªãnh"
        ],
        specifications: {
            "Lo·∫°i tai nghe": "In-ear",
            "K√≠ch th∆∞·ªõc driver": "10mm",
            "T·∫ßn s·ªë ƒë√°p ·ª©ng": "20Hz - 20kHz",
            "ƒê·ªô nh·∫°y": "100dB",
            "Tr·ªü kh√°ng": "16Œ©",
            "Tr·ªçng l∆∞·ª£ng": "25g"
        },
        thumbnails: ["üèÉ", "üí¶", "üîÑ"]
    },
    {
        id: 6,
        name: "Sansui Classic Vintage",
        category: "VINTAGE",
        price: 2490000,
        originalPrice: 2990000,
        image: "üéº",
        rating: 4.5,
        reviews: 98,
        description: "Tai nghe phong c√°ch vintage v·ªõi √¢m thanh ·∫•m √°p, thi·∫øt k·∫ø c·ªï ƒëi·ªÉn.",
        badge: "Vintage",
        features: [
            "Thi·∫øt k·∫ø retro ƒë·ªôc ƒë√°o",
            "√Çm thanh ·∫•m √°p",
            "ƒê·ªám da cao c·∫•p",
            "D√¢y c√°p b·ªán ch·ªëng r·ªëi"
        ],
        specifications: {
            "Lo·∫°i tai nghe": "Over-ear",
            "K√≠ch th∆∞·ªõc driver": "40mm",
            "T·∫ßn s·ªë ƒë√°p ·ª©ng": "20Hz - 20kHz",
            "ƒê·ªô nh·∫°y": "108dB",
            "Tr·ªü kh√°ng": "32Œ©",
            "Tr·ªçng l∆∞·ª£ng": "280g"
        },
        thumbnails: ["üéº", "üé®", "üîó"]
    }
];

// User menu functions
function toggleUserMenu() {
    const dropdown = document.getElementById('userDropdown');
    dropdown.classList.toggle('show');
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
    const userMenu = document.querySelector('.user-menu');
    if (!userMenu.contains(event.target)) {
        document.getElementById('userDropdown').classList.remove('show');
    }
});

// Modal functions
function showModal(modalId) {
    document.getElementById(modalId).classList.add('show');
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
}

function showLoginModal() {
    showModal('loginModal');
}

function showRegisterModal() {
    showModal('registerModal');
}

function switchToRegister() {
    closeModal('loginModal');
    showModal('registerModal');
}

function switchToLogin() {
    closeModal('registerModal');
    showModal('loginModal');
}

function showProfile() {
    if (currentUser) {
        document.getElementById('profileName').value = currentUser.name;
        document.getElementById('profileEmail').value = currentUser.email;
        document.getElementById('profilePhone').value = currentUser.phone || '';
        document.getElementById('profileAddress').value = currentUser.address || '';
        showModal('profileModal');
    }
}

// Auth functions
function login(email, password) {
    currentUser = {
        email: email,
        name: email.split('@')[0],
        phone: '',
        address: ''
    };
    
    document.getElementById('loggedOutMenu').style.display = 'none';
    document.getElementById('loggedInMenu').style.display = 'block';
    
    showSuccess('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
    closeModal('loginModal');
}

function logout() {
    currentUser = null;
    document.getElementById('loggedOutMenu').style.display = 'block';
    document.getElementById('loggedInMenu').style.display = 'none';
    showSuccess('ƒêƒÉng xu·∫•t th√†nh c√¥ng!');
}

// Product functions
function renderProducts() {
    const grid = document.getElementById('productsGrid');
    if (grid) {
        grid.innerHTML = products.map(product => `
            <div class="product-card" onclick="viewProductDetail(${product.id})">
                <div class="product-badge">${product.badge}</div>
                <div class="product-image">${product.image}</div>
                <div class="product-info">
                    <div class="product-category">${product.category}</div>
                    <h3 class="product-title">${product.name}</h3>
                    <div class="product-rating">
                        <div class="stars">
                            ${'‚òÖ'.repeat(Math.floor(product.rating))}${'‚òÜ'.repeat(5-Math.floor(product.rating))}
                        </div>
                        <span class="rating-text">${product.rating} (${product.reviews} ƒë√°nh gi√°)</span>
                    </div>
                    <div class="product-price">
                        <span class="current-price">${formatPrice(product.price)}</span>
                        <span class="original-price">${formatPrice(product.originalPrice)}</span>
                        <span class="discount">-${Math.round((1 - product.price/product.originalPrice) * 100)}%</span>
                    </div>
                    <p class="product-description">${product.description}</p>
                    <button class="add-to-cart" onclick="event.stopPropagation(); addToCart(${product.id})">
                        <i class="fas fa-shopping-cart"></i>
                        Th√™m v√†o gi·ªè
                    </button>
                </div>
            </div>
        `).join('');
    }
}

function viewProductDetail(productId) {
    window.location.href = `product-detail.html?id=${productId}`;
}

function renderProductDetail() {
    const urlParams = new URLSearchParams(window.location.search);
    const productId = parseInt(urlParams.get('id'));
    const product = products.find(p => p.id === productId);

    if (!product || !document.getElementById('productName')) return;

    // Populate product details
    document.getElementById('productName').textContent = product.name;
    document.getElementById('productCategory').textContent = product.category;
    document.getElementById('productBadge').textContent = product.badge;
    document.getElementById('mainProductImage').innerHTML = product.image;
    document.getElementById('productStars').innerHTML = '‚òÖ'.repeat(Math.floor(product.rating)) + '‚òÜ'.repeat(5 - Math.floor(product.rating));
    document.getElementById('productRating').textContent = `${product.rating} (${product.reviews} ƒë√°nh gi√°)`;
    document.getElementById('currentPrice').textContent = formatPrice(product.price);
    document.getElementById('originalPrice').textContent = formatPrice(product.originalPrice);
    document.getElementById('discount').textContent = `-${Math.round((1 - product.price/product.originalPrice) * 100)}%`;
    document.getElementById('description').innerHTML = `<p>${product.description}</p>`;

    // Populate features
    document.getElementById('productFeatures').innerHTML = product.features.map(feature => `
        <li><i class="fas fa-check"></i> ${feature}</li>
    `).join('');

    // Populate specifications
    document.getElementById('specificationsTable').innerHTML = Object.entries(product.specifications).map(([key, value]) => `
        <tr>
            <th>${key}</th>
            <td>${value}</td>
        </tr>
    `).join('');

    // Populate thumbnails
    document.getElementById('productThumbnails').innerHTML = product.thumbnails.map((thumb, index) => `
        <div class="thumbnail ${index === 0 ? 'active' : ''}" onclick="changeProductImage('${thumb}')">${thumb}</div>
    `).join('');

    // Populate reviews (static for now)
    document.getElementById('reviews').innerHTML = `
        <p>Kh√°ch h√†ng A: S·∫£n ph·∫©m tuy·ªát v·ªùi, √¢m thanh r·∫•t chi ti·∫øt!</p>
        <p>Kh√°ch h√†ng B: Tho·∫£i m√°i khi ƒëeo l√¢u, ƒë√°ng gi√° v·ªõi s·ªë ti·ªÅn b·ªè ra.</p>
    `;
}

function changeProductImage(image) {
    document.getElementById('mainProductImage').innerHTML = image;
    const thumbnails = document.querySelectorAll('.thumbnail');
    thumbnails.forEach(thumb => thumb.classList.remove('active'));
    event.currentTarget.classList.add('active');
}

function showTab(tabId) {
    document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById(tabId).classList.add('active');
    event.currentTarget.classList.add('active');
}

function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(price);
}

// Cart functions
let detailQuantity = 1;

function updateDetailQuantity(change) {
    detailQuantity = Math.max(1, detailQuantity + change);
    document.getElementById('quantityInput').value = detailQuantity;
}

function addToCartFromDetail() {
    const urlParams = new URLSearchParams(window.location.search);
    const productId = parseInt(urlParams.get('id'));
    const product = products.find(p => p.id === productId);
    if (product) {
        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity += detailQuantity;
        } else {
            cart.push({...product, quantity: detailQuantity});
        }
        updateCartUI();
        showSuccess('ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');
        detailQuantity = 1;
        document.getElementById('quantityInput').value = detailQuantity;
    }
}

function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    if (product) {
        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            cart.push({...product, quantity: 1});
        }
        updateCartUI();
        showSuccess('ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');
    }
}

function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCartUI();
    renderCart();
}

function updateQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(productId);
        } else {
            updateCartUI();
            renderCart();
        }
    }
}

function updateCartUI() {
    const cartCount = document.getElementById('cartCount');
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;
    cartCount.classList.toggle('show', totalItems > 0);
}

function showCart() {
    renderCart();
    showModal('cartModal');
}

function renderCart() {
    const cartItems = document.getElementById('cartItems');
    const cartTotal = document.getElementById('cartTotal');
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<div class="empty-cart">Gi·ªè h√†ng tr·ªëng</div>';
        cartTotal.textContent = 'T·ªïng c·ªông: 0ƒë';
        document.getElementById('checkoutBtn').style.display = 'none';
        return;
    }

    cartItems.innerHTML = cart.map(item => `
        <div class="cart-item">
            <div class="cart-item-info">
                <div class="cart-item-title">${item.name}</div>
                <div class="cart-item-price">${formatPrice(item.price)}</div>
            </div>
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, -1)">-</button>
                <span>${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, 1)">+</button>
            </div>
            <button class="remove-item" onclick="removeFromCart(${item.id})">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `).join('');

    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.textContent = `T·ªïng c·ªông: ${formatPrice(total)}`;
    document.getElementById('checkoutBtn').style.display = 'block';
}

function checkout() {
    if (!currentUser) {
        closeModal('cartModal');
        showLoginModal();
        showSuccess('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n');
        return;
    }
    
    if (cart.length === 0) {
        showSuccess('Gi·ªè h√†ng tr·ªëng!');
        return;
    }

    cart = [];
    updateCartUI();
    closeModal('cartModal');
    showSuccess('ƒê·∫∑t h√†ng th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng.');
}

// Form handling
document.getElementById('loginForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    login(email, password);
});

document.getElementById('registerForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const name = document.getElementById('registerName').value;
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (password !== confirmPassword) {
        showSuccess('M·∫≠t kh·∫©u kh√¥ng kh·ªõp!');
        return;
    }
    
    login(email, password);
    closeModal('registerModal');
    showSuccess('ƒêƒÉng k√Ω th√†nh c√¥ng!');
});

const contactForm = document.getElementById('contactForm');
if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        showSuccess('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t.');
        this.reset();
    });
}

document.getElementById('profileForm').addEventListener('submit', function(e) {
    e.preventDefault();
    if (currentUser) {
        currentUser.name = document.getElementById('profileName').value;
        currentUser.phone = document.getElementById('profilePhone').value;
        currentUser.address = document.getElementById('profileAddress').value;
        closeModal('profileModal');
        showSuccess('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
    }
});

// Success message
function showSuccess(message) {
    const successMessage = document.getElementById('successMessage');
    const successText = document.getElementById('successText');
    successText.textContent = message;
    successMessage.classList.add('show');
    
    setTimeout(() => {
        successMessage.classList.remove('show');
    }, 3000);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    renderProducts();
    renderProductDetail();
    updateCartUI();
});

// Close modals when clicking outside
window.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.classList.remove('show');
    }
});